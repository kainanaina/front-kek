.twitter-x {
  $parentRef: &;

  position: absolute;
  inset: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #fff;

  @mixin isMorphing {
    #{$parentRef}.s--morphing & {
      @content;
    }
  }

  // all animations and transitions are applied only when the parent element has the class .s--morphing
  // this allows us to remove the class and instantly reset the UI to the initial state, without seeing any backwards animations

  // as for specific elements animations, then everything is somewhat straightforward:
  // there is a `--%name%-at` for animation/transition duration and `--%name%-delay` for delay, so they are always paired together

  &__center {
    width: var(--logo-size);
    height: var(--logo-size);
  }

  // scss generates random values on compilation which are allowing us to make it look like a random shaking,
  // by rapidly shifting element vertically and horizontally
  @keyframes shaking {
    @for $i from 0 through 50 {
      #{$i * 2%} { // interpolated results are 0%, 2%, ... 98%, 100%
        // (random(20) - 10) * 1px is a random value between -10px and 10px
        transform: translate((random(20) - 10) * 1px, (random(20) - 10) * 1px);
      } 
    }
  }

  &__logo {
    z-index: 2;
    position: absolute;
    inset: 0;

    @include isMorphing {
      animation: shaking var(--twitter-shaking-at) var(--twitter-shaking-delay);
    }
  
    &-svg {
      overflow: visible;
      stroke: var(--color-twitter);
      fill: var(--color-twitter);
      will-change: stroke, fill;

      @include isMorphing {
        transition: stroke var(--logo-morphing-at) var(--logo-morphing-delay), fill var(--logo-fill-at) var(--logo-fill-delay);
        fill: transparent;
        stroke: #fff;
      }
    }

    &-svg2 {
      overflow: visible;
      position: absolute;
      inset: 0;
      fill: #fff;

      path {
        transform: scale(0);

        // setting custom transform-origin is required to make the animation look like the line is being drawn from the center
        // ideally we would be using % values, but svg got this ancient trouble where transform-origin with % just doesn't works in many browsers
        // libraries like GSAP got their own logic to allow % values, which relies on some internal calculations, but we don't have such luxury here
        &:first-child {
          // keep in mind that this svg got viewBox="0 0 270 270", so px values are relative to these dimensions, unlike with twitter icon which is 24x24
          transform-origin: 100px 160px;
        }

        &:last-child {
          transform-origin: 160px 100px;
        }

        @include isMorphing {
          // cubic-bezier transition-timing-function allows you to create fancier animations, where elements could be bouncing or looking slightly elastic
          // you can check this playground to get the better idea https://cubic-bezier.com/
          transition: transform var(--x-part-2-at) var(--x-part-2-delay) cubic-bezier(0.13, 0.9, 0.3, 1.3);
          transform: scale(1);
        }
      }
    }
  }

  &__sweat {
    --timing: var(--twitter-reaction-at) var(--twitter-reaction-delay);

    position: absolute;
    right: 60px;
    top: 55px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    width: 60px;
    gap: 4px;
    color: white;
    transform: translateY(-10px);
    opacity: 0;
    will-change: opacity, transform;

    @include isMorphing {
      transition: opacity var(--timing), transform var(--timing);
      transform: translateY(0);
      opacity: 1;
    }

    svg {
      will-change: opacity;

      @include isMorphing {
        transition: opacity var(--logo-fill-at) var(--logo-fill-delay);
        opacity: 0;
      }
    }
  }

  &__elon {
    position: absolute;
    left: calc(100% + 20px);
    top: 50%;
    width: 300px;
    transform: translateY(-50%);
    opacity: 0;
    will-change: opacity;

    @media (max-width: 1100px) {
      width: 240px;
    }

    @media (max-width: 800px) {
      left: 50%;
      top: auto;
      bottom: 100%;
      width: 200px;
      transform: translate(-100px, 0);
    }

    @include isMorphing {
      transition: opacity var(--elon-appearence-at) var(--elon-appearence-delay);
      opacity: 1;
    }
  }

  // the black background is applied via "transform:scale" expansion of black circle in the middle of the demo, which covers whole demo container
  // it's a very cool technique which looks fancier than just changing background color the normal way, plus it allows you to cover other elements, like Elon's picture in our case
  // in order to ensure that it would be covering entire screen no matter what (if demo container would be unrestricted), we are using vmax units
  // and to be more specific we are setting 150vmax, which is 150% of the largest side of the screen
  // why 150? well, 1.44 is square root of 2, which is useful to know to understand basic geometry regarding triangles and shit, so that round shape could cover a square fully
  // so 150 is just a value with buffer above 144, it doesn't really matters that much
  &__black-bg {
    position: absolute;
    left: 50%;
    top: 50%;
    // 150vmax ensures that this element will cover the entire screen no matter what
    // (assuming that parent container doesn't have it's own overflow: hidden)
    width: 150vmax;
    height: 150vmax;
    margin-left: -75vmax;
    margin-top: -75vmax;
    border-radius: 50%;
    background: #000;
    transform: scale(0);
    will-change: transform;

    @include isMorphing {
      transition: transform var(--logo-morphing-at) var(--logo-morphing-delay);
      transform: scale(1);
    }
  }
  
  &__doge {
    position: absolute;
    left: calc(100% + 5px);
    bottom: calc(100% + 15px);
    width: 40px;
    transform: scale(0);

    @include isMorphing {
      transition: transform var(--doge-appearence-at) var(--doge-appearence-delay) cubic-bezier(0.13, 0.9, 0.4, 1.6);
      transform: scale(1);
    }
  }

  &__reset {
    position: absolute;
    left: 50%;
    top: calc(100% + 40px);
    width: 36px;
    height: 36px;
    margin-left: -18px;
    stroke: #fff;
    transform: scale(0);
    pointer-events: none;
    cursor: pointer;

    @include isMorphing {
      transition: transform var(--reset-appearence-at) var(--reset-appearence-delay) cubic-bezier(0.13, 0.9, 0.4, 1.6);
      transform: scale(1);
      pointer-events: auto;
    }
  }
}